com.error.occurred.while=Error occurred while executing {0}
com.error.occurred.below=The error below occurred while executing/{0}
com.stop.force=Terminated by force
com.job.wrong.parameter=Job parameter {0}''s value {1} is wrong.
com.job.parameter.required=Job parameter {0} is required.
com.component.lookup.error=Lookup error occurred for {0} component.
com.get.success=Search Completed
com.insert.success=Additional Completed
com.modify.success=Modification Completed
com.delete.success=Deletion Completed
com.approve.success=Approval completed
com.reject.success=Rejection completed
com.upload.success=Upload completed
com.multi.get.success=Search Completed [Count:{0}]
com.multi.insert.success=Additional Request Result [Ok:{0}, Fail:{1}]
com.multi.modify.success=Modification Request Result [Ok:{0}, Fail:{1}]
com.multi.delete.success=Deletion Request Result [Ok:{0}, Fail:{1}]
com.multi.approve.success=Approval Request Result [Ok:{0}, Fail:{1}]
com.multi.reject.success=Rejection Request Result [Ok:{0}, Fail:{1}]
com.server.error=Fail to connect the server
com.invalid.request.error=Invalid request (type:{0}, method:{1}, id:{2})

agent.starting.message=Starting NEXCORE Batch Agent [{0}] {1}
agent.started.message=Started NEXCORE Batch Agent [{0}] successfully !!!
agent.server.port.error=Agent''s server socket already is use.
agent.closed=Agent is closed.
agent.jobtype.error=Job type error {0}
agent.jobexecution.notfound=JobExecution {0} cannot be found.
agent.thread.check.stop.state=Checking {0} thread''s stop state ({1}/{2})
agent.thread.stop.fail=Failed to stop {0} thread.
agent.fail.run.job.same.instance.is.running=Failed to run {0}. Same job instance is already running.
agent.do.start.job=Job started {0} :        {1}
agent.do.stop.job=Job Attempt to stop job {0}
agent.do.suspend.job=Attempt to suspend job {0}
agent.do.resume.job=Attempt to resume job {0}
agent.jobend=Job ended   {0} : {1} : {2} (run time:{3}ms)
agent.jobsuspended=Job suspended {0} : {1}
agent.jobresumed=Job resumed {0} : {1}
agent.fail.write.joblog=Error occurred while writing job log.
agent.fail.read.logfile=Failed to read job log file {0}
agent.fail.init.logger=Error occurred while initiating job logger.
agent.fail.load.component=Failed to load batch class [{0}].
agent.fail.to.execute.preprocessor=Failed to execute pre-processors
agent.fail.to.execute.postprocessor=Failed to execute post-processors
agent.fail.start.job=Failed to start job {0}.
agent.fail.suspend.job=Failed to suspend job {0}.
agent.fail.resume.job=Failed to resume job {0}.
agent.fail.stop.job=Failed to stop job {0}.
agent.fail.getstatus.job=Failed to get status of Job {0}.
agent.filewatch.filenotfound=File not found.
agent.filewatch.dirnotfound=Directory {0} not found.
agent.filewatch.noperm.write=Permission to {0} denied.
agent.filewatch.del.file.error=Failed to delete file {0}
agent.filewatch.exist.dir.error=Directory {0} already exists.
agent.filewatch.exist.file.error.noopt=Parameter value of ''MOVE_OVERWRITE'' is false and {0} file already exists.
agent.filewatch.file.move.error=Failed to move file {0}
agent.filewatch.file.move.ok1=The files moved to {0}
agent.filewatch.file.move.ok2=The file {0} was moved to {1}
agent.filewatch.file.move.ing=The files are being moved to {0}
agent.filewatch.end.error1=Failed to move selected files. File watching was ended.
agent.filewatch.end.ok1=File watching was finished with {0} files selected. Selected files are {1}
agent.filewatch.end.ok2=File watching was timeouted ({0} minutes). File watching was ended.
agent.filewatch.end.ok3=Agent server is on shutdown. File watching was ended.
agent.filewatch.check1=[{0}] checking. Directory : {1}, File : {2}
agent.filewatch.check.info1=File watch information
agent.filewatch.check.info2=Start time            : {0}
agent.filewatch.check.info3=Directory             : {0}
agent.filewatch.check.info4=Filename              : {0}
agent.filewatch.check.info5=Polling interval      : {0} seconds.
agent.filewatch.check.info6=Remaining time        : [{0,date,full} {0,time,full}]
agent.filewatch.check.info7=Move files            : {0}
agent.filewatch.check.info8=Move directory        : {0}
agent.filewatch.check.info8.2=Create Move directory : {0}
agent.filewatch.check.info9=Move overwrite        : {0,choice,0#OVERWRITE|1#ERROR} (MOVE_OVERWRITE={1})
agent.dbproc.call.error=Error occurred while executing procedure ({0})  

agent.proctype.unsupported.operation= {0} operation is unsupported for proc type job.
agent.proctype.cannot.find.process.info=Cannot find process info for {0} job. Process may have already ended.
agent.proctype.process.force.stop=Process will be stopped forcibly.
agent.thistype.cannot.suspend=Cannot suspend {0} type job.
agent.thistype.cannot.resume=Cannot resume {0} type job.
agent.thistype.cannot.stop=Cannot stop {0} type job.
agent.sleeptype.begin.sleep={0} second sleep beginning.
agent.jobend.callback.filewrite.error=Error occurred while saving to file {0}. JobExecution={1}
agent.scheduler.network.error=Network error occurred while talking to scheduler.

agent.logger.oldfile.cleaner.keepperiod.value.error=[OldLogFileCleaner] keepPeriod value ({0}) is invalid.
agent.logger.oldfile.cleaner.next.time=[OldLogFileCleaner] Next clean time is set for [{0,date,full} {0,time,full}].
agent.logger.oldfile.cleaner.start=[OldLogFileCleaner] Deleting files created before {0}
agent.logger.oldfile.cleaner.delete.ok=[OldLogFileCleaner] Deleted file : {0}
agent.logger.oldfile.cleaner.end=[OldLogFileCleaner] A total of {1} file(s) was/were deleted from {0} directory.

main.starting.message=Starting NEXCORE Batch Scheduler [{0}]
main.started.message=Started NEXCORE Batch Scheduler [{0}] successfully. !!!
main.comp.init.ok={0} initialized. {1}
main.dup.start.error=Already running or lock file still remains due to abnormal termination earlier.
main.dup.timeschlog.detected.error=Another scheduler using same database was detected. Only one scheduler for one database is allowed.  
main.dup.server.socket.error=Server port ({0}) is already in use.
main.start.fail=Error occurred while starting.
main.http.start.error=Error occurred while staring monitoring HTTP server.
main.started.with.norun=Cannot perform job because the scheduler started under the NoRun mode. 
main.get.max.jobexeid.error=Error occurred while getting last JobEcecution ID of Job {0}.
main.max.jobexeid.exceed.error=Maximum serial number of Job Executino ID {0} exceeded (999999).
main.jobexe.notfound=JobExecution {0} does not exist.
main.jobinfo.check.cannot.trigger.self=It is impossible to configure itself as a Trigger Job.

main.jobinfo.check.missing.param=Job {0} requires parameter ''{1}''
main.jobinfo.check.missing.attribute=Job {0} requires attribute of ''{1}''
main.jobinfo.check.wrong.attribute=Wrong value for attribute ''{0}''
main.jobinfo.check.basedate.logic.missing=Logic for base date is wrong.

main.global.param.load.error=Error occurred while loading global parameter.
main.global.param.admin= Global parameter ({1}) was {2,choice,0#added|1#viewed|2#modified|3#deleted} from [{0}]
main.global.param.admin.error=Error occurred while  {1,choice,0#adding|1#viewing|2#modifying|3#deleting} global parameter ({0})

main.param.endless.recursion.detected=Endless recursion detected for parameter {0}.
main.param.unknown.function=Function {0} is not registered.
main.param.interpret.error=Error occurred while interpreting parameter value ({0}).
main.param.wrong.operands=Wrong operands {0}.
main.param.evaluate.function.error=Error occurred while interpreting function {0} {1}

main.parallel.group.admin=Parallel group ({1}) was {2,choice,0#added|1#viewed|2#modified|3#deleted} from [{0}].
main.parallel.group.admin.error=Error occurred while  {1,choice,0#adding|1#viewing|2#modifying|3#deleting} parallel group ({0}).

main.runmon.select.jobins.error=[Run monitor] Error occurred while viewing job instance.
main.runmon.work.error=[Run monitor] Run error occurred.
main.runmon.work.error.recovered=[Run monitor] Recovered from error.
main.runmon.set.ghost.error.state.inconsistent=[Run monitor] Inconsistent state occurred while changing status of {0} to "GHOST".
main.runmon.ended.remove.runlist=[Run monitor] {0} has ended and will be removed from the run list.
main.runmon.update.lastmodifytime.over24=[Run monitor] {0} has been running for more than 24 hours. Updating last modifying time.
main.jobcause.jobexe.missing=JobExecution missing.

main.agent.wrong.agentid={0} is a wrong agent.
main.agent.disabled.agent={0} is a disabled agent.
main.agent.get.agentinfo.error=Error occurred while getting agent ({0}) information
main.agent.agentclient.connect.error=Agent ({0}) connection error.
main.agent.monitoring.info.error=Error occurred while getting monitoring information of agent ({0}).
main.agent.get.progress.info.error=Error occurred while getting job progress value from agent.
main.agent.unused=Unused agent
main.agent.admin=Agent information will be {1,choice,0#added|1#viewed|2#modified|3#deleted} from [{0}] {2}
main.agent.admin.error=Error occurred while {0,choice,0#adding|1#viewing|2#modifying|3#deleting} agent information {1}
main.agent.closeopen=[{0}]: Agent({1}) is {2}.
main.agent.closeopen.error=Error occurred while Agent ({0}) is {1} .
main.agent.readlogfile.error=Error occurred while reading job log file. File may not have been created or deleted.
main.agent.notinternal.error={0} is not internal agent.
main.agent.maxcount.error=The agent count (current : {0}) can't greater than the max agent count (license : {1}). (except INTERNAL)

main.prejob.cond.OK=OK
main.prejob.cond.FAIL=Fail
main.prejob.cond.OKFAIL=End
main.prejob.cond.INSEXIST=Instance exists
main.prejob.cond.INSNONE=Instance doesn''t exist
main.prejob.cond.OK_OR_INSNONE=OK or instance does not exist.
main.prejob.cond.FAIL_OR_INSNONE=Fail or instance does not exist.
main.prejob.cond.OKFAIL_OR_INSNONE=Ended or instance does not exist.
main.prejob.cond.ALLINS_OK=All Instances end ok.
main.prejob.cond.ALLINS_FAIL=All Instances end fail.
main.prejob.cond.ALLINS_OKFAIL=All Instances end.

main.vf.admin.error=Error occurred while {0,choice,0#adding|1#viewing|2#modifying|3#deleting} view filter {1}
main.vf.getjobdef.error=Error occurred while getting view filter''s job definition information. {0}

main.jobnotify.maxid.error=Error occurred while initializing job notification''s last serial number.
main.jobnotify.admin.error=Error occurred while {0,choice,0#adding|1#viewing|2#modifying|3#deleting} job notification information. {1}
main.jobnotify.receiver.admin.error=Error occurred while {0,choice,0#adding|1#viewing|2#modifying|3#deleting} job notification receiver information. {1}
main.jobnotify.receiver.admin.error=Error occurred while {0,choice,0#adding|1#viewing|2#modifying|3#deleting} job notification receive information. {1}
main.jobnotify.notify.process.error=Error occurred from {1} while performing job notification {0}.
main.jobnotify.sender.error=Error occurred while sending job notification.
main.jobnotify.send.mail.error=Error occurred while sending job notification email.
main.jobnotify.mail.template.file.error=Error occurred while reading job notification email template file {0}.
main.jobnotify.notifylist.admin.error=Error occurred while viewing job notification list. {0}
main.jobnotify.notifylist.count.admin.error=Error occurred while viewing the number of job notification list. {0}
main.jobnotify.oldnotify.cleaner.start=[OldNotifyCleaner] Deleting notify list created before {0}.
main.jobnotify.oldnotify.cleaner.delete.ok=[OldNotifyCleaner] A total of {1} notify(s) was/were deleted from table {0}.
main.jobnotify.oldnotify.cleaner.next.time=[OldNotifyCleaner] Next clean time is set for [{0,date,full} {0,time,full}].
main.jobnotify.oldnotify.cleaner.keepperiod.value.error=[OldNotifyCleaner]  keepPeriod value ({0}) is invalid.
main.jobnotify.oldnotify.cleaner.error=[OldNotifyCleaner] Error occurred while deleting notify list.

main.jobgroup.admin=[{0}]: JobGroup ({1}) - {2,choice,0#Add|1#View|2#Modify|3#Delete} 
main.jobgroup.admin.error=Error occurred  during JobGroup {0,choice,0#Add|1#View|2#Modify|3#Delete} {1}

main.admin.action=[{0}]: {1} job is working {2}

main.user.jobid.wrong=Wrong job ID pattern {0}.
main.user.admin=[{0}]: User ({1}) - {2,choice,0#Add|1#View|2#Modify|3#Delete|4#Change Password} 
main.user.admin.error=Error occurred  during User {0,choice,0#Add|1#View|2#Modify|3#Delete|4#Change Password} {1}
main.user.login.ok=Login OK [{0}/{1}]
main.user.login.fail=Login failed [{0}/{1}]

main.permission.unknown.user=Unregistered user {0}
main.permission.error.inactive.state=Authority not granted. {0} is an inactive account.
main.permission.error.wrong.jobid=Wrong job ID.
main.permission.error.not.allowed.jobid={0}: There is no authority to  {2} on Job {1}.
main.permission.error.not.operator={0} does not have operator authority.
main.permission.error.not.admin={0} does not have administrator authority.

main.login.password.empty=Password is empty.
main.login.id.notfound={0} account does not exist.
main.login.inactive={0} is an inactive account.
main.login.wrong.password=Wrong password

main.act.job.notfound.error=Job {0} does not exist, so instance cannot be created. [{1}]
main.act.activating=Creating job instance ({0} and PROC_DATE:{1}). [{2}]
main.act.make.basedate.error=Error occurred while creating base date of {0}. Cal:{1}, Logic:{2}

main.dailyact.disabled=[DailyActivator] DailyActivator is disabled. Instance for today''s date will not be created. 
main.dailyact.precheck.false=[DailyActivator] Automatic instance creation was already performed today.
main.dailyact.begin.activation=[DailyActivator] Beginning daily instance activation of PROC_DATE ({0}).
main.dailyact.end.activation=[DailyActivator] Instance activation finished. A total of {0} instance(s) was/were created.
main.dailyact.activation.error=[DailyActivator] Error occurred during instance activation.
main.dailyact.next.activation.time=[DailyActivator] Next instance activation is set for  [{0,date,full} {0,time,full}].
main.dailyact.activation.one.error=Error occurred while activating job [{0}]''s instance.
main.dailyact.logtable.no.pk=[DailyActivator] Activation log table requires primary key (PROC_DATE).
main.dailyact.targetdate.notexist=[DailyActivatorJob] Parameter ''TARGET_DATE'' does not exist. Instead use system date ({0}).

main.daysch.wrong.weekday_monthday.type={0} is an invalid weekday/monthday value. (one of AND, OR)
main.daysch.wrong.schedule.type={0} is a wrong schedule type. (EXPRESSION, FIXED)
main.daysch.wrong.before_after.exp={0} is a wrong before/after date expression.
main.daysch.wrong.day_schedule.type={0} is a wrong day schedule type. (NUMBER, CALENDAR)
main.daysch.plan.error=Error occurred while reading {0} schedule.
main.daysch.calc.basedate.error={0} : Standard date calculation error on {1}.

main.oldjobcleaner.disabled=[OldJobCleaner] OldJobCleaner is disabled and will not be run today.
main.oldjobcleaner.keepperiod.value.error=[OldJobCleaner] keepPeriod value ({0}) is invalid.
main.oldjobcleaner.next.time=[OldJobCleaner] Next clean time is set for [{0,date,full} {0,time,full}].
main.oldjobcleaner.target.basedate=[OldJobCleaner] Deleting instances activated before {0}.
main.oldjobcleaner.target.jobid.list=[OldJobCleaner] Target job ID list for deletion. {0}
main.oldjobcleaner.delete.ok=[OldJobCleaner] A total of {1} instance(s) was/were deleted from table {0}.
main.oldjobcleaner.precheck.false=[OldJobCleaner] Clean process was already performed today.

main.runcheck.expired=Instance expiration or "Until" time out. Instance activation date:{0}
main.runcheck.locked=Locked
main.runcheck.agentclosed=Agent ({0}) is closed.
main.runcheck.agentdown=Agent ({0}) is down.
main.runcheck.agentnotinuse=Agent ({0}) is not in use. 
main.runcheck.time.outofrange=Current time is out of range (From - Until scope)
main.runcheck.maxok.exceed=Exceeded Max OK ({0}).
main.runcheck.need.confirm=Waiting for confirmation.
main.runcheck.max.parallel.limit.notfound=Parallel limit group ({0}) does not exist.
main.runcheck.max.parallel.limit.exceed=Exceeded max value ({1}) for parallel limit group ({0}).
main.runcheck.prejobins.notexist=Instance does not exist for preceding job {0}.
main.runcheck.prejobins.state=State {1} of preceding job {0} 
main.runcheck.prejob.fail=Error occurred while checking preceding job.
main.runcheck.prejob.andor.error=Preceding job''s AND/OR  preconditions are invalid.
main.runcheck.fail=Error occurred while checking preconditions for instance run ({0}).
main.runcheck.satisfy={0} satisfies run preconditions and will run soon.
main.runcheck.not.satisfy={0} does not satisfy precondition ({1}) and will continue to be on stand by.

main.endproc.callbackend=Job({0}) that ran from {1} will end. Return code:({2})
main.endproc.error.because.closed=Job cannot end because scheduler is closed.
main.endproc.notify.error=Error occurred while running job notification of {0}.
main.endproc.preproc.error=Error occurred while running pre process of {0}.
main.endproc.postproc.error=Error occurred while running post process of {0}.
main.endproc.callbackend.error=Error occurred while running backend process of {0}.
main.endproc.callbacksuspend={0} that ran from {1} will be suspended.
main.endproc.callbacksuspend.error=Error occurred while running callbacksuspend of {0}.
main.endproc.callbackresume=Resuming {0} that is suspended from {1}.
main.endproc.callbackresume.error=Error occurred while running callbackresume of {0}.
main.endproc.callbackend.maybe.already.done={0} may already have completed callback process.
main.endproc.self.triggger.error={0}: ({1}) is defined as a trigger itself  it is not possible to trigger itself.
main.endproc.callbackend.updatestate.error={0}: finishing callback process, error occurred while the instance status is modified.
main.endproc.trigger.ok=After triggered by {0}, instance ({1}) was created.
main.endproc.trigger.error=Triggering of {0}, error occurred while {1} instance creation.
main.endproc.lastjobexeid.error={0} Job state or last_job_exe_id changed before processing jobend callback

main.jobstarter.decisionqueue.error=Decision Queue: error occurred while {0} starting decision.
main.jobstarter.runqueue.error=Error occurred from run queue while starting {0}.

main.repeat.repeatyn.changed.to.n=Repetition parameter is changed to N.
main.repeat.wait=Waiting for repeat
main.repeat.state.changed.while.sleep={0}''s state was forcibly changed during repeat sleep.
main.repeat.check.repeat.error=Error occurred while checking {0}''s repeat job.
main.repeat.until.required=RepeatJob requires Time Until attributes.
main.repeat.maxok.exceed=Cannot exceed repeat value of Max OK ({0}).
main.repeat.gubun.required=Repetition parameter is not defined.
main.repeat.sleep.for.repeat.state=Sleepping until [{0}] for repeat.
main.repeat.sleep.for.repeat={0} will repeat sleep task for {1} ms.
main.repeat.cancel.before.sleep=Previous sleep task will be cancelled because {0} was run by force during repeated sleep task.
main.repeat.sleep.error.state.inconsistent=Cannot perform repeated sleep task because stat is inconsistent after ending {0}.
main.repeat.wait.for.next.repeat=Waiting for repeat execution. 
main.repeat.expired=All repeat schedule is expired.

main.calendar.nodefine=There are not registered calendar.
main.calendar.notfound={0} is in unregistered calendar.
main.calendar.loaded=[{0}] ({1}) Calenadar was loaded. ({2,number,#}~{3,number,#})
main.calendar.reloaded=Calendar information will be reloaded.
main.calendar.load.error=Error occurred while loading calendar information.
main.calendar.confirm.reload=Are you sure to reload Calendar?

main.timesch.disabled=Time scheduler is disabled.
main.timesch.begin=Beginning time scheduler check.
main.timesch.fatal.error=A fatal error occurred while running time scheduler. The scheduler will run after going into a short sleep mode.
main.timesch.end=Ending time scheduler check. ({0})

main.jobdef.notfound=Job {0} does not exist.
main.jobdef.add=Creating job ({1}) from [{0}] {2} 
main.jobdef.modify= Changing job definition information ({1}) from [{0}] {2}
main.jobdef.delete= Deleting job definition information ({1}) from [{0}].
main.jobdef.crud.error=Error occurred while {1,choice,0#creating|1#viewing|2#modifying|3#deleting} job {0}''s definition information.
main.jobdef.get.jobdef.error=Error occurred while getting job definition ({0}) information.
main.jobdef.maxcount.error=The job definition count (current : {0}) can't greater than the max job definition count (license : {1}).

main.jobdefstg.approve.confirm.msg=Are you sure to approve?
main.jobdefstg.reject.confirm.msg=Are you sure to reject?
main.jobdefstg.multi.approve.ok=Approval completed [Ok:{0}, Fail:{1}] 
main.jobdefstg.multi.reject.ok=Rejection completed [Ok:{0}, Fail:{1}]
main.jobdefstg.notfound=Job {1} of request number {0} does not exist.
main.jobdefstg.jobid.dup=Job {0} already exists.
main.jobdefstg.add=[{0}]: Job({1})  {2} is requested 
main.jobdefstg.add.error=Error occurred during job {0} request. The request has already been made or is a duplicate request of the same job ID.
main.jobdefstg.dbselect.error=Error occurred while getting request information of request number({0}), Job Id({1}).
main.jobdefstg.dbselect.query.error=Error occurred during request information query.
main.jobdefstg.state.not.q=Job {0} is not requested.
main.jobdefstg.approve=Request of request number({1}), Job Id({2}) is approved from [{0}].
main.jobdefstg.approve.error=Error occurred while approving request number({0}), Job Id({1}).
main.jobdefstg.reject=Request number({1}), Job Id({2}) is rejected from [{0}].
main.jobdefstg.reject.error=Error occurred while rejecting request number ({0}), Job Id({1}).
main.jobdefstg.delete=Request of request number({1}) is canceled from [{0}].
main.jobdefstg.delete.error=Error occurred while canceling request number({0}).

main.jobins.notfound=Job instance {0} does not exist.
main.jobins.getlist.error=Error occurred while reading instance list.
main.jobins.maxid.error=Error occurred while reading "PROC_DATE" ({1}) last instance ID serial number of {0}.
main.jobins.maxid.exceed.error=Maximum serial number of Job Instance ID {0}, PROC_DATE ({1}) exceeded (9999).
main.jobins.lock.required.for.update=Needs to be locked before running update.
main.jobins.change.jobstate.error=Error occurred while modifying {0}''s job instance status.
main.jobins.crud.error=Error occurred while {1,choice,0#creating|1#viewing|2#modifying|3#deleting} job instance {0}.
main.jobins.modify=Modifying job instance ({1}) from [{0}].
main.jobins.modify.agent=Modifying agent to {2} for job instance ({1}) from [{0}].
main.jobins.modify.agent.error.jobstate=Can not change agent while job state is {0} 
main.jobins.notyetstarted={0} does not started.

main.ondemand.invoked.state=({0}/{1}) On-demand batch requested.
main.ondemand.invoked=On demand batch ({0}) is invoked from ({1}/{2}).
main.ondemand.error=Error occurred while starting on demand batch ({0}) from ({1}/{2}).

main.jobexe.get.threadstack.null=Cannot get thread stack because {0} has already ended.
main.jobexe.threadstack.wrong.type=Cannot get thread stack for {0} type job.
main.jobexe.crud.error=Error occurred while {1,choice,0#creating|1#viewing|2#modifying|3#deleting} job execution {0}.

main.job.dbselect.error=Error occurred while viewing job information of {0}.
main.job.dbselect.query.error=Error occurred during job query. ({0})
main.job.prepare.to.launch=Preparing {0}/{1} to launch in server {2}.
main.job.launched=(START) {0} launched in server {1} [{2}/{3}]
main.job.launch.error=Error occurred while launching {0}.
main.job.launch.error.callback.fail=Error occurred while running launch error callback process of {0}.
main.job.dummy.callback.fail=Error occurred while processing dummy job call back of {0}.
main.job.state.error=Job state {1} is invalid.

main.jobctl.state.forcerun=Run forced from {0}.
main.jobctl.state.rerun=Rerun from {0}.
main.jobctl.state.forceendok=Forced normal termination from {0}
main.jobctl.state.inconsistent.error=While controlling instance ({1}) from [{0}], state become inconsistent. 

main.jobctl.activate=[{0}]: Process Date ({2}), Instance ({1}) is creating.
main.jobctl.activate.error=Error occurred while activating instance {1} from [{0}].
main.jobctl.activatelock=[{0}]: Process Date ({2}), Locked after Instance-({1}) creation.
main.jobctl.activatelock.error= Error occurred while activating instance {1} from [{0}].
main.jobctl.lock=Locking instance ({1}) from [{0}].
main.jobctl.lock.error=Error occurred while Locking instance ({1}) from [{0}.
main.jobctl.unlock=Unlocking instance ({1}) from [{0}].
main.jobctl.unlock.error=Error occurred while unlocking instance ({1}) from [{0}].
main.jobctl.forcerun=Force running instance ({1}) from [{0}].
main.jobctl.state.error=Cannot perform {2} from state {1} ({0}).
main.jobctl.forcerun.error=Error occurred while running {1} forcibly from [{0}].
main.jobctl.rerun= 
main.jobctl.rerun.error=Error occurred while rerunning instance ({1}) from [{0}].
main.jobctl.stop=Trying to stop {1} forcibly from [{0}].
main.jobctl.stop.error=Error occurred while stopping {1} forcibly from [{0}].
main.jobctl.suspend= Trying to suspend {1} from [{0}]. 
main.jobctl.suspend.error= Error occurred while suspending {1} from [{0}].
main.jobctl.resume=Trying to resume {1} from [{0}].
main.jobctl.resume.error=Error occurred while resuming {1} from [{0}].
main.jobctl.forceendok=Processing force endok of instance {1} from [{0}].
main.jobctl.forceendok.error=Error occurred while processing force endok of instance {1} from [{0}].
main.jobctl.confirm=Confirmed {1} from [{0}].
main.jobctl.confirm.error=Error occurred while confirming {1} from [{0}].
main.jobctl.change.loglevel=Changed log level of {1} to {2} from [{0}].
main.jobctl.change.loglevel.error=Error occurred while changing log level of {0} to {2}
main.jobctl.changetoghost=Trying to change to ghost {1} forcibly from [{0}].

main.jobmon.activate.ok=Instance ({0}) activated.
main.jobmon.activaterun.ok=Insatance ({0}) activated and run.
main.jobmon.activatelock.ok=Instance({0}) locked after activation.
main.jobmon.lock.ok=Instance ({0}) has been locked.
main.jobmon.unlock.ok=Instance({0}) has been unlocked.
main.jobmon.forcerun.ok=Instance ({0}) has been run forcibly.
main.jobmon.rerun.ok=Trying to rerun instance ({0}).
main.jobmon.stop.ok=Trying to stop instance ({0}) forcibly.
main.jobmon.suspend.ok=Trying to suspend instance ({0}).
main.jobmon.resume.ok=Trying to resume instance ({0}).
main.jobmon.forceendok.ok=Processing force endok for instance ({0}).
main.jobmon.toghost.ok=Processing force change to ghost ({0}).
main.jobmon.confirm.ok=Instance ({0}) has been confirmed.
main.jobmon.modify.parameters.ok=Parameter of instance {0}) has been changed.
main.jobmon.modify.jobins.ok=Attribute information of instance ({0}) has been changed.
main.jobmon.change.loglevel.ok=Changing log level to {0}.
main.jobmon.migrate.ok=Job migration request to [{2}] completed [Ok:{0}, Fail:{1}]
main.jobmon.multi.approve.ok=Approval completed [Ok{0}, Fail:{1}] 
main.jobmon.multi.reject.ok=Rejection completed [Ok:{0}, Fail:{1}]
main.jobmon.multi.activate.ok=Instances activated [Ok:{0}, Fail:{1}]
main.jobmon.multi.activatelock.ok=Instances locked after activation [Ok:{0}, Fail:{1}]
main.jobmon.multi.activaterun.ok=Instances run after activation [Ok:{0}, Fail:{1}]
main.jobmon.multi.request.delete.ok=Job Definition deletion requested [Ok:{0}, Fail:{1}]

main.shutdown.process.started=Trying shutdown from !!!! [{0}/{1}] !!!!
main.shutdown.stop.module=Stopping {0}.
main.shutdown.finished=Shutdown completed.

main.peer.request.jobctl=Request {0} job's {1} action to peer.
main.peer.same.systemid=The same value of ''NEXCORE_ID' with peer.
main.peer.time.diff.toobig=The time difference between the Peer and the system is more than {0} minutes ({1} seconds). Please correct the system time and operate startup again.

main.license.no.file=License File is NOT exists.
main.license.invalid=The license File is changed by someone.
main.license.incorrect.hostname=The hostname in license is incorrect with system.
main.license.cant.ha=The {0} license do NOT support HA.
main.license.expired.date=The license has expired.
main.license.get.agentcount.error=Error occurred while getting agent count.
main.license.get.jobdefcount.error=Error occurred while getting job definition count.
main.license.get.agent.jobdef.count=[LicenseManager] Agent: {0} (max: {1}), Job Definition: {2} (max: {3})

setting.common.get.error=Failed to get {0}.
setting.common.save.error=Failed to save {0}.
setting.common.modify.error=Failed to modify {0}.
setting.common.remove.error=Failed to delete {0}.
setting.common.upload.error=Failed to upload {0}.
setting.common.upload.success=Uploaded successfully. [Insert: {0}, Modify: {1}]
setting.common.file.upload.error=Failed to upload the file.
setting.common.file.download.error=Failed to download the file.
setting.common.nochecked.error=At least one must be selected.

setting.gparam.paramname.validate.error={0} is required. Only alphabets, numbers and _ are allowed.
setting.gparam.paramvalue.validate.error={0} is required.
setting.pgroup.id.validate.error={0} is required. Only alphabets, numbers and _ are allowed.
setting.pgroup.description.validate.error={0} is required.
setting.group.attr.id.validate.error={0} is required. Only alphabets, numbers and _ are allowed.
setting.group.attr.name.validate.error={0} is required.
setting.group.attr.validvalue.validate.error={0} is required.
setting.group.attr.linecount.validate.error={0} is required and can only be zero or more.
setting.group.id.validate.error={0} is required. Only alphabets, numbers and _ are allowed.
setting.group.name.validate.error={0} is required.
setting.user.id.validate.error={0} is required. Only alphabets, numbers and _ are allowed.
setting.user.name.validate.error={0} is required.
setting.user.password.validate.error={0} is required.
setting.user.password.mismatching.error=Passwords do NOT match.
setting.user.email.validate.error={0} must be entered correctly.
setting.user.phone.validate.error={0} must be entered correctly.
setting.notify.jobIdPattern.validate.error={0} is required.
setting.notify.time.validate.error={0} is required and can only be zero or more.
setting.notify.interval.validate.error={0} is required and can only be zero or more.
setting.notify.count.validate.error={0} is required and can only be zero or more.
setting.notify.receiver.name.validate.error={0} is required.
setting.notify.receiver.desc.validate.error={0} is required.
setting.notify.receiver.email.validate.error={0} must be entered correctly.
setting.notify.receiver.sms.validate.error={0} must be entered correctly.
setting.agent.id.validate.error={0} is required. Only alphabets, numbers and _ are allowed.
setting.agent.name.validate.error={0} is required.
setting.agent.description.validate.error={0} is required.
setting.agent.ip.validate.error={0} is required.
setting.agent.port.validate.error={0} is required and can only be zero or more.

common.validate.id.error={0} is required. Only alphabets, numbers and _ are allowed.
common.validate.require.error={0} is required.
common.validate.mismatching.error={0} and {1} do not match.
common.validate.format.error={0} must be entered correctly.
common.validate.require.digit.error={0} is required and can only be zero or more.